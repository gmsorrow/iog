{"ast":null,"code":"var _jsxFileName = \"C:\\\\projects\\\\iog\\\\web\\\\src\\\\uikit\\\\Input.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { ReactComponent as ClipboardCopy } from \"@svgr/webpack?-svgo,+titleProp,+ref!../imgs/clipboard.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Input = props => {\n  _s();\n\n  const {\n    label,\n    showClipboardCopy,\n    value,\n    defaultValue,\n    onChange\n  } = props;\n  const [localValue, setLocalValue] = useState(value != null ? value : defaultValue != null ? defaultValue : '');\n  const theValue = onChange != null ? value : localValue;\n\n  const copyToClipboard = () => {\n    if (!theValue) {\n      return;\n    }\n\n    navigator.clipboard.writeText(theValue).then(() => {// TODO toaster here\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"input-label\",\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"input\",\n        value: theValue,\n        onChange: e => onChange != null ? onChange(e.target.value) : setLocalValue(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), showClipboardCopy && /*#__PURE__*/_jsxDEV(ClipboardCopy, {\n        className: \"clipboard-copy\",\n        onClick: copyToClipboard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Input, \"8LxiEgvMUk1fz10KR2+Nnby+RvI=\");\n\n_c = Input;\nexport default Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["C:/projects/iog/web/src/uikit/Input.tsx"],"names":["React","useState","Input","props","label","showClipboardCopy","value","defaultValue","onChange","localValue","setLocalValue","theValue","copyToClipboard","navigator","clipboard","writeText","then","e","target"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;AAWA,MAAMC,KAAK,GAAIC,KAAD,IAAuB;AAAA;;AACnC,QAAM;AACJC,IAAAA,KADI;AAEJC,IAAAA,iBAFI;AAGJC,IAAAA,KAHI;AAIJC,IAAAA,YAJI;AAKJC,IAAAA;AALI,MAMFL,KANJ;AAQA,QAAM,CAACM,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,CAC1CK,KAAK,IAAI,IAAT,GACIA,KADJ,GAEIC,YAAY,IAAI,IAAhB,GACEA,YADF,GAEE,EALoC,CAA5C;AAQA,QAAMI,QAAQ,GAAGH,QAAQ,IAAI,IAAZ,GACbF,KADa,GAEbG,UAFJ;;AAIA,QAAMG,eAAe,GAAG,MAAM;AAC5B,QAAI,CAACD,QAAL,EAAe;AACb;AACD;;AAEDE,IAAAA,SAAS,CAACC,SAAV,CACGC,SADH,CACaJ,QADb,EAEGK,IAFH,CAEQ,MAAM,CACV;AACD,KAJH;AAKD,GAVD;;AAYA,sBACE;AAAA,4BACE;AAAM,MAAA,SAAS,EAAC,aAAhB;AAAA,gBAA+BZ;AAA/B;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,8BACE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,SAAS,EAAC,OAFZ;AAGE,QAAA,KAAK,EAAEO,QAHT;AAIE,QAAA,QAAQ,EACLM,CAAD,IAAOT,QAAQ,IAAI,IAAZ,GACHA,QAAQ,CAACS,CAAC,CAACC,MAAF,CAASZ,KAAV,CADL,GAEHI,aAAa,CAACO,CAAC,CAACC,MAAF,CAASZ,KAAV;AAPrB;AAAA;AAAA;AAAA;AAAA,cADF,EAYID,iBAAiB,iBACf,QAAC,aAAD;AACE,QAAA,SAAS,EAAC,gBADZ;AAEE,QAAA,OAAO,EAAEO;AAFX;AAAA;AAAA;AAAA;AAAA,cAbN;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAyBD,CA1DD;;GAAMV,K;;KAAAA,K;AA4DN,eAAeA,KAAf","sourcesContent":["import React, { useState } from 'react';\nimport { ReactComponent as ClipboardCopy } from '../imgs/clipboard.svg';\n\ninterface InputProps {\n  label: string;\n  showClipboardCopy?: boolean;\n  value?: string;\n  defaultValue?: string;\n  onChange?: (value: string) => void;\n}\n\nconst Input = (props: InputProps) => {\n  const {\n    label,\n    showClipboardCopy,\n    value,\n    defaultValue,\n    onChange,\n  } = props;\n\n  const [localValue, setLocalValue] = useState(\n    value != null\n      ? value\n      : defaultValue != null\n        ? defaultValue\n        : ''\n  );\n\n  const theValue = onChange != null\n    ? value\n    : localValue;\n\n  const copyToClipboard = () => {\n    if (!theValue) {\n      return;\n    }\n\n    navigator.clipboard\n      .writeText(theValue)\n      .then(() => {\n        // TODO toaster here\n      });\n  };\n\n  return (\n    <div>\n      <span className=\"input-label\">{label}</span>\n      <div>\n        <input\n          type=\"text\"\n          className=\"input\"\n          value={theValue}\n          onChange={\n            (e) => onChange != null\n              ? onChange(e.target.value)\n              : setLocalValue(e.target.value)\n          }\n        />\n        {\n          showClipboardCopy && (\n            <ClipboardCopy\n              className=\"clipboard-copy\"\n              onClick={copyToClipboard}\n            />\n          )\n        }\n      </div>\n    </div>\n  );\n};\n\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}