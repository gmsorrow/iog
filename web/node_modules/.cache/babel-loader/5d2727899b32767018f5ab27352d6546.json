{"ast":null,"code":"import r from \"immer\";\nimport { useState as n, useCallback as t, useMemo as o, useReducer as f } from \"react\";\n\nfunction i(o) {\n  var f = n(o),\n      i = f[1];\n  return [f[0], t(function (n) {\n    i(\"function\" == typeof n ? r(n) : n);\n  }, [])];\n}\n\nfunction u(n, t, i) {\n  var u = o(function () {\n    return r(n);\n  }, [n]);\n  return f(u, t, i);\n}\n\nexport { i as useImmer, u as useImmerReducer };","map":{"version":3,"sources":["../src/index.ts"],"names":["useImmer","initialValue","updateValue","useState","useCallback","updater","produce","useImmerReducer","reducer","initialState","initialAction","cachedReducer","useMemo","useReducer"],"mappings":";;;SAgBgBA,C,CAASC,C,EAAAA;AAAAA,MAAAA,CAAAA,GACIE,CAAAA,CAASF,CAATE,CADJF;AAAAA,MACXC,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CADWD;AAEvB,SAAO,CAAA,CAAA,CAAA,CAAA,CAAA,EAELG,CAAAA,CAAY,UAAA,CAAA,EAAA;AAERF,IAAAA,CAAAA,CADoB,cAAA,OAAZG,CAAY,GACRC,CAAAA,CAAQD,CAARC,CADQ,GAGRD,CAFZH,CAAAA;AAEYG,GAJhBD,EAKG,EALHA,CAFK,CAAP;AAOK;;AAAA,SASSG,CATT,CASyBC,CATzB,EASuCC,CATvC,EAS0DC,CAT1D,EAS0DA;AAC/D,MAAMC,CAAAA,GAAgBC,CAAAA,CAAQ,YAAA;AAAA,WAAMN,CAAAA,CAAQE,CAARF,CAAN;AAAcE,GAAtBI,EAAgC,CAACJ,CAAD,CAAhCI,CAAtB;AACA,SAAOC,CAAAA,CAAWF,CAAXE,EAA0BJ,CAA1BI,EAA+CH,CAA/CG,CAAP;AAAsDH;;AAAAA,SAAAA,CAAAA,IAAAA,QAAAA,EAAAA,CAAAA,IAAAA,eAAAA","sourcesContent":["import produce, { Draft, nothing } from \"immer\";\nimport { useState, useReducer, useCallback, useMemo, Dispatch } from \"react\";\n\nexport type Reducer<S = any, A = any> = (\n  draftState: Draft<S>,\n  action: A\n) => void | S | (S extends undefined ? typeof nothing : never);\n\nexport type Updater<S> = (f: (draft: Draft<S>) => void | S) => void;\n\nexport type ImmerHook<S> = [S, Updater<S>];\n\nexport function useImmer<S = any>(\n  initialValue: S | (() => S)\n): [S, (f: ((draft: Draft<S> | S) => void) | S) => void];\n\nexport function useImmer(initialValue: any) {\n  const [val, updateValue] = useState(initialValue);\n  return [\n    val,\n    useCallback(updater => {\n      if(typeof updater === \"function\")\n        updateValue(produce(updater));\n      else\n        updateValue(updater);\n    }, [])\n  ];\n}\n\nexport function useImmerReducer<S = any, A = any>(\n  reducer: Reducer<S, A>,\n  initialState: S,\n  initialAction?: (initial: any) => S\n): [S, Dispatch<A>];\nexport function useImmerReducer(reducer: any, initialState: any, initialAction: any) {\n  const cachedReducer = useMemo(() => produce(reducer), [reducer]);\n  return useReducer(cachedReducer, initialState as any, initialAction);\n}\n"]},"metadata":{},"sourceType":"module"}